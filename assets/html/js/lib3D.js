function lib3D(){function e(e,o,a){addEventListenersToCanvas(e),setTimeout(function(){try{e.gl=e.getContext("experimental-webgl")}catch(s){throw"Sorry, your browser does not support WebGL."}let i=e.gl;e.setShaders=function(e,o){function a(e,n){let t=i.createShader(e);if(i.shaderSource(t,n),i.compileShader(t),i.getShaderParameter(t,i.COMPILE_STATUS))i.attachShader(l,t);else{let e=i.getShaderInfoLog(t);e=e.substring(9,e.length),e=parseInt(e)-r+e.substring(e.indexOf(":"),e.length),error={name:"Error at line",message:e}}}let l=i.createProgram();a(i.VERTEX_SHADER,t+e),a(i.FRAGMENT_SHADER,t+o);try{i.linkProgram(l),i.useProgram(l)}catch(s){console.log("AHA!!!",s)}i.getProgramParameter(l,i.LINK_STATUS),i.program=l,i.bindBuffer(i.ARRAY_BUFFER,i.createBuffer()),i.bufferData(i.ARRAY_BUFFER,new Float32Array([-1,1,0,1,1,0,-1,-1,0,1,-1,0]),i.STATIC_DRAW),i.enable(i.DEPTH_TEST),i.depthFunc(i.LEQUAL),i.clearDepth(-1),i.enable(i.BLEND),i.blendFunc(i.ONE,i.ONE_MINUS_SRC_ALPHA);let c=Float32Array.BYTES_PER_ELEMENT,g=i.getAttribLocation(l,"aPos");i.enableVertexAttribArray(g),i.vertexAttribPointer(g,3,i.FLOAT,!1,n*c,0*c)},e.setShaders(o,a)},30)}const n=3;let t="\nprecision highp float;\nfloat noise(vec3 v) {\n   vec4 r[2];\n   const mat4 E = mat4(0.,0.,0.,0., 0.,.5,.5,0., .5,0.,.5,0., .5,.5,0.,0.);\n   for (int j = 0 ; j < 2 ; j++)\n   for (int i = 0 ; i < 4 ; i++) {\n      vec3 p = .60*v + E[i].xyz, C = floor(p), P = p - C-.5, A = abs(P), D;\n      C += mod(C.x+C.y+C.z+float(j),2.) * step(max(A.yzx,A.zxy),A)*sign(P);\n      D  = 314.1*sin(59.2*float(i+4*j) + 65.3*C + 58.9*C.yzx + 79.3*C.zxy);\n      P=p-C-.5;r[j][i] = dot(P,fract(D)-.5)*pow(max(0.,1.-2.*dot(P,P)),4.);\n   }\n   return 6.50 * (r[0].x+r[0].y+r[0].z+r[0].w+r[1].x+r[1].y+r[1].z+r[1].w);\n}",r=0;for(let e=0;e<t.length;e++)"\n"==t.charAt(e)&&r++;addEventListenersToCanvas=function(e){let n=e.getBoundingClientRect(),t=t=>(2*t-n.left-n.right)/e.height,r=t=>1-2*(t-n.top)/e.height;onDrag||(onDrag=(()=>{})),onMove||(onMove=(()=>{})),onPress||(onPress=(()=>{})),onRelease||(onRelease=(()=>{})),onKeyPress||(onKeyPress=(()=>{})),onKeyRelease||(onKeyRelease=(()=>{})),e.addEventListener("mousemove",function(n){(e.isDown?onDrag:onMove)(t(n.clientX),r(n.clientY))}),e.addEventListener("mousedown",function(n){onPress(t(n.clientX),r(n.clientY)),e.isDown=!0}),e.addEventListener("mouseup",function(n){onRelease(t(n.clientX),r(n.clientY)),e.isDown=!1}),window.addEventListener("keydown",function(e){if(!isEditing()){switch(e.keyCode){case 32:case 33:case 34:e.preventDefault()}onKeyPress(e.keyCode)}},!0),window.addEventListener("keyup",function(e){isEditing()||onKeyRelease(e.keyCode)},!0)},addEventListenersToCanvas(myCanvas),S.setUniform=function(e,n,t,r,o,a,i,s){if(S.gl.init){let l=S.gl.getUniformLocation(S.gl.program,n);S.gl["uniform"+e](l,t,r,o,a,i,s)}};let o="attribute vec3 aPos;varying vec3 vPos;void main(){gl_Position=vec4(vPos=aPos,1.);}",a="varying vec3 vPos;void main(){gl_FragColor=vec4(sqrt(vPos),1.);}",i=o,s=a;S.setVertexShader=(e=>{S.gl.init&&e!=i&&myCanvas.setShaders(i=e,s)}),S.setFragmentShader=(e=>{S.gl.init&&e!=s&&myCanvas.setShaders(i,s=e)}),e(myCanvas,i,s),S.gl={drawArrays:()=>{}},S.gl.init=!1,setTimeout(function(){S.gl=myCanvas.gl,S.gl.init=!0,i=o,s=a},60)}