rooms.raytrace=function(){lib3D(),description='Try playing around with the camera!\n<small>\n    <p>\n    <b>Atmospheric parameters</b>\n    <br> <input type="range" id="tod" value="60",min="1",max="100"> Time of Day\n    <br> <input type="range" id="fi"  value="10",min="1",max="100"> Fog Intensity\n    <br> <input type="range" id="ci"  value="100",min="1",max="100"> Cloud Intensity\n    <br> <input type="range" id="ch"  value="30",min="1",max="100"> Camera Height\n    <br> <input type="range" id="cpx"  value="50",min="1",max="100"> Camera Position X\n    <br> <input type="range" id="cpz"  value="100",min="1",max="100"> Camera Position Z\n</small>\n',code={init:"\n\n   // DEFINE NUMBER OF LIGHTS\n\n   S.nL = 1;\n\n   // DEFINE CAMERA POSITION\n\n   S.cPos = [0.,-.2,2.];\n\n   // DEFINE MATERIALS TO BE RENDERED VIA PHONG REFLECTANCE MODEL\n\n   let materials = [\n      [.15,.05,.025,0, .3,.1,.05,0, .6,.2,.1,3, 0,0,0,0], // COPPER\n      [.25,.15,.025,0, .5,.3,.05,0, 1,.6,.1,6,  0,0,0,0], // GOLD\n      [.25,0,0,0,      .5,0,0,0,    2,2,2,20,   0,0,0,0], // PLASTIC\n      [.05,.05,.05,0,  .1,.1,.1,0,  1,1,1,5,    0,0,0,0], // LEAD\n      [.1,.1,.1,0,     .1,.1,.1,0,  1,1,1,5,    0,0,0,0], // SILVER\n   ];\n",fragment:"\nS.setFragmentShader(`\n\n   // DECLARE CONSTANTS, UNIFORMS, VARYING VARIABLES\n\n   const int nQ = ` + S.nQ + `;\n   const int nL = ` + S.nL + `;\n\n   uniform vec3 uCamPos;\n   uniform float uTime;\n   uniform float uTOD;\n   uniform vec3 uBgColor;\n   uniform vec3 uLd[nL];\n   uniform vec3 uLc[nL];\n\n   uniform float uLi;\n   uniform float uFi;\n   uniform float uCi;\n\n   uniform mat4 uQ[nQ];\n\n   varying vec3 vPos;\n\n   // DEFINE CAMERA FOCAL LENGTH\n\n   float fl = 3.;\n\n   // COMPUTE REFRACTION RAY\n\n   vec3 computeRefraction(vec3 W1, vec3 N, float rFactor) {\n      vec3 C1 = N * dot(W1, N);\n      vec3 S1 = W1 - C1;\n      float theta1 = length(S1);\n      float theta2 = asin(theta1 * rFactor);\n      vec3 C2 = C1 * cos(theta2) / cos(theta1);\n      vec3 S2 = S1 * sin(theta2) / sin(theta1);\n      return C2 + S2;\n   }\n\n   // COMPUTE EXPONENTIAL FOG\n\n   vec3 expFog(vec3 inColor, vec3 fogColor, float t, float fogIntensity) {\n      t = max(1., t);\n      float a = pow(1. - fogIntensity, log(t));\n      return mix(fogColor * uLi, inColor, a);\n   }\n\n   // RAY TRACING QUADRIC SURFACE\n\n   vec3 normalQuadric(vec3 P, mat4 Q) {\n      float a = Q[0][0];\n      float b = Q[0][1];\n      float c = Q[0][2];\n      float d = Q[0][3];\n      float e = Q[1][0];\n      float f = Q[1][1];\n      float g = Q[1][2];\n      float h = Q[1][3];\n      float i = Q[2][0];\n      float j = Q[2][1];\n      float k = Q[2][2];\n      float l = Q[2][3];\n      float m = Q[3][0];\n      float n = Q[3][1];\n      float o = Q[3][2];\n      float p = Q[3][3];\n\n      float fx = 2. * a * P.x + (b + e) * P.y + (c + i) * P.z + (d + m);\n      float fy = (b + e) * P.x + 2. * f * P.y + (g + j) * P.z + (h + n);\n      float fz = (c + i) * P.x + (g + j) * P.y + 2. * k * P.z + (l + o);\n\n      float nOffset = noise(P * 50.) * 2.;\n\n      return normalize(vec3(fx, fy, fz) + vec3(nOffset));\n   }\n\n   vec2 rayQuadric(vec3 V, vec3 W, mat4 Q) {\n      vec4 V1 = vec4(V, 1.);\n      vec4 W0 = vec4(W, 0.);\n\n      float a = dot(W0, Q * W0);\n      float b = dot(V1, Q * W0) + dot(W0, Q * V1);\n      float c = dot(V1, Q * V1);\n\n      if (b * b - 4. * a * c < 0.) return vec2(-1.);\n\n      float r1 = (-b - sqrt(b * b - 4. * a * c)) / (2. * a);\n      float r2 = (-b + sqrt(b * b - 4. * a * c)) / (2. * a);\n\n      return vec2(r1, r2);\n   }\n\n   vec2 rayTube(vec3 V, vec3 W, mat4 Q1, mat4 Q2, float tMax) {\n      vec2 t1 = rayQuadric(V, W, Q1);\n      vec2 t2 = rayQuadric(V, W, Q2);\n\n      float tIn = max(t1.x, t2.x);\n      float tOut = min(t1.y, t2.y);\n\n      float s = 0.;\n      if (t1.x < t2.x) s = 1.;\n\n      if ((tIn > 0. && tIn < tMax) && tIn < tOut) return vec2(tIn, s);\n\n      return vec2(-1., s);\n   }\n\n   vec3 shadeTube(vec3 P, vec3 N) {\n      vec3 diffuse  = vec3(.8, .2, .1);\n      vec3 specular = vec3(.5, .3, .05);\n      float p       = 2.;\n\n      vec3 c = vec3(0.);\n      vec3 E = vec3(0.,0.,1.);\n\n      // LOOP THROUGH LIGHT SOURCES\n\n      for (int l = 0 ; l < nL ; l++) {\n         for (int i = 0; i < nQ; i += 2) {\n            vec2 s = rayTube(P, uLd[0], uQ[i], uQ[i + 1], 1000.);\n            if (s.x > 0.) {\n               diffuse = vec3(0.);\n               specular = vec3(0.);\n            }\n         }\n         vec3 R = 2. * dot(N, uLd[l]) * N - uLd[l];\n         c += uLc[l] * (diffuse * max(0.,dot(N, uLd[l]))\n                     + specular * pow(max(0., dot(R, E)), p))\n                     * uLi;\n      }\n\n      c *= uLi;\n      return c;\n   }\n\n   // FOLLOWING RENDER ATMOSPHERIC PHENOMENAL\n\n   // PSEUDO SUN RAY TRACING\n\n   float raySun(vec3 V, vec3 W) {\n      vec3 sunPos = uLd[0] * 990.;\n      V -= sunPos.xyz;\n      V += .01 * W;\n      float b = dot(V, W);\n      float d = b * b - dot(V, V) + 100.;\n      return d < 0. ? -1. : -b - sqrt(d);\n   }\n\n   // RETURN THE COLOR OF THE LIGHT\n\n   vec3 shadeSun(vec3 V, vec3 W, float t) {\n      return uLc[0] * 1.5;\n   }\n\n   // COMPUTE AND SHADE THE NOISE-BASED CLOUDS USING RAY-MARCHING\n\n   vec3 shadeCloud(vec3 V, vec3 W, float t) {\n      if (V.y + t * W.y > 10.) {\n         t = (10. - V.y) / W.y;\n         vec3 cloudPoint = V + t * W;\n         float layer = abs(noise(cloudPoint * .01 - vec3(uTime * .01)));\n         layer *= abs(noise(cloudPoint * .05 + vec3(uTime * .1)));\n\n         return layer * uLc[0] * uCi;\n      }\n      else {\n         return vec3(0.);\n      }\n   }\n\n   // COMPUTE SURFACE HEIGHT USING NOISE\n\n   float computeSurfaceHeight(vec3 surfacePoint) {\n      float n = noise(surfacePoint * 8. + vec3(uTime, uTime, 0.));\n      n += noise(surfacePoint * 16. + vec3(uTime, -uTime, 0.));\n\n      return n / 100.;\n   }\n\n   vec3 shadeUnderwater(vec3 V, vec3 W) {\n      // FOR SHADING UNDER THE WATER, GIVE A FIXED DISTANCE AND RAY-MARCHING IT\n\n      float t = 2.;\n      float deltaT = 2.;\n\n      float l = 0.;\n\n      vec3 c = vec3(0.);\n      vec3 samplePoint = V;\n\n      for (int i = 0; i < 5; i++) {\n         samplePoint += t * W;\n\n         // CAST LIGHT ONLY IF THE SAMPLING POINT IS ABOVE A CERTAIN HEIGHT\n         if (-samplePoint.y > uLi && samplePoint.y < 0.) {\n            float h = -samplePoint.y;\n            float d = h * length(uLd[0]) / uLd[0].y;\n            l += computeSurfaceHeight(samplePoint + d * uLd[0]);\n         }\n\n         t += deltaT;\n      }\n\n      c += vec3(l / 2.);\n      \n      float a = clamp(0., 1., (samplePoint.y * samplePoint.y) / 1000.);\n      c += mix(uBgColor * .5, vec3(0.), a);\n      return c;\n   }\n\n   // COMPUTE NORMAL USING HEIGHTMAP DATA\n\n   vec3 computeSurfaceNormal(vec3 surfacePoint) {\n      vec3 s1 = vec3(surfacePoint.x - .001, surfacePoint.y, surfacePoint.z);\n      vec3 s2 = vec3(surfacePoint.x + .001, surfacePoint.y, surfacePoint.z);\n      vec3 s3 = vec3(surfacePoint.x, surfacePoint.y, surfacePoint.z - .001);\n      vec3 s4 = vec3(surfacePoint.x, surfacePoint.y, surfacePoint.z + .001);\n\n      vec3 h1 = vec3(surfacePoint.x - .001,\n                     computeSurfaceHeight(s1),\n                     surfacePoint.z);\n      vec3 h2 = vec3(surfacePoint.x + .001,\n                     computeSurfaceHeight(s2),\n                     surfacePoint.z);\n      vec3 h3 = vec3(surfacePoint.x,\n                     computeSurfaceHeight(s3),\n                     surfacePoint.z - .001);\n      vec3 h4 = vec3(surfacePoint.x,\n                     computeSurfaceHeight(s4),\n                     surfacePoint.z + .001);\n\n      vec3 l1 = h1 - h2;\n      vec3 l2 = h3 - h4;\n\n      // FIND THE CROSS PRODUCT OF L1 AND L2\n\n      vec3 n = vec3(l1.y * l2.z - l1.z * l2.y, \n                    l1.z * l2.x - l1.x * l2.z,\n                    l1.x * l2.y - l1.y * l2.x);\n\n      if (n.y < 0.) n = -n;\n\n      return normalize(n);\n   }\n\n   // TRACE AND SHADE THE SEA FLOOR\n\n   float rayFloor(vec3 V, vec3 W, float t) {\n      if (V.y + t * W.y < -1.) return (-1. - V.y) / W.y;\n      else return -1.;\n   }\n\n   // COMPUTE CAUSTICS USING SEA SURFACE NOISE\n\n   vec3 shadeFloor(vec3 P) {\n      for (int i = 0; i < nQ; i += 2) {\n         vec2 s = rayTube(P, normalize(uLd[0] + .01 * computeSurfaceNormal(P))\n                           , uQ[i], uQ[i + 1], 1000.);\n         if (s.x > 0.) {\n            return vec3(.2);\n         }\n      }\n\n      float caustics = abs(noise((P + uLd[0]) * 3. - vec3(uTime * .5)));\n      caustics += abs(noise((P + uLd[0]) * 5. + vec3(uTime * .5)));\n      caustics = 1. - caustics;\n      caustics = pow(caustics, 4.);\n      caustics *= uLi;\n      return vec3(.5 + caustics);\n   }\n\n   // TRACE A PLANE SURFACE BY HEIGHT\n\n   float raySurface(vec3 V, vec3 W, float t) {\n      if (V.y + t * W.y < computeSurfaceHeight(V + t * W)) return -V.y / W.y;\n      else return -1.;\n   }\n\n   // TRACE A PLANE SURFACE BY HEIGHT UNDERWATER\n\n   float raySurfaceUnder(vec3 V, vec3 W, float t) {\n      if (V.y + t * W.y > computeSurfaceHeight(V + t * W)) return -V.y / W.y;\n      else return -1.;\n   }\n\n   // SHADE AN OCEAN SURFACE\n\n   vec3 shadeSurface(vec3 W, vec3 P, float t) {\n      vec3 c = expFog(uBgColor * .5, uLc[0] * .2, 100., uFi);\n      vec3 N = computeSurfaceNormal(P);\n\n      vec3 diffuse = vec3(.1);\n      vec3 specular = vec3(1.);\n\n      for (int l = 0 ; l < nL ; l++) {\n         vec3 R = 2. * dot(N, uLd[l]) * N - uLd[l];\n         c += uLc[l] * (diffuse * max(0.,dot(N, uLd[l])) * uLi\n                      + specular * pow(max(0., dot(R, W)), 20.)) * uLi;\n      }\n\n      // WATER REFRACTION\n\n      vec3 rfc = vec3(0.);\n      float rftMin = 10.;\n\n      if (t < 10.) {\n         vec3 rDir = computeRefraction(W, N, .5);\n         /*\n         float rfFloor = rayFloor(P, rDir, rftMin);\n\n         if (rfFloor > 0. && rfFloor < rftMin) {\n            rftMin = rfFloor;\n            rfc = shadeFloor(P + rDir * rftMin);\n         }\n         */\n         for (int i = 0; i < nQ; i += 2) {\n            vec2 rfQ = rayTube(P, rDir, uQ[i], uQ[i + 1], rftMin);\n            if (rfQ.x > 0. && rfQ.x < rftMin) {\n               rftMin = rfQ.x;\n               vec3 rfN;\n               if (rfQ.y == 0.) rfN = normalQuadric(P + rfQ.x * rDir, uQ[i]);\n               else rfN = normalQuadric(P + rfQ.x * rDir, uQ[i + 1]);\n               rfc = shadeTube(P + rfQ.x * rDir, rfN);\n            }\n         }\n      }\n\n      if (rftMin < 10.) c = mix(rfc, c, 1. - rftMin / 10.);\n\n      // WATER REFLECTION\n\n      vec3 R = 2. * dot(N, -W) * N + W;\n      float rtMin = 10000.;\n      vec3 rc = vec3(0.);\n\n      for (int i = 0; i < nQ; i += 2) {\n         vec2 rQ = rayTube(P, R, uQ[i], uQ[i + 1], rtMin);\n         if (rQ.x > 0. && rQ.x < rtMin) {\n            rtMin = rQ.x;\n            vec3 rN;\n            if (rQ.y == 0.) rN = normalQuadric(P + rQ.x * R, uQ[i]);\n            else rN = normalQuadric(P + rQ.x * R, uQ[i + 1]);\n            rc = shadeTube(P + rQ.x * R, rN);\n         }\n      }\n\n      float rS = raySun(P, R);\n      if (rS > 0. && rS < rtMin) {\n         rtMin = rS;\n         rc = shadeSun(P, R, rtMin) * uLc[0];\n      }\n\n      if (rtMin < 10000.) c = mix(c, rc, .5);\n\n      c *= uLi;\n\n      return c;\n   }\n\n   // SHADE AN OCEAN SURFACE UNDERWATER\n\n   vec3 shadeSurfaceUnder(vec3 W, vec3 P, float t) {\n      vec3 c = expFog(uBgColor * .5, uLc[0] * .2, 100., uFi);\n      vec3 N = -computeSurfaceNormal(P);\n\n      vec3 diffuse = vec3(.1);\n      vec3 specular = vec3(.2);\n\n      for (int l = 0 ; l < nL ; l++) {\n         vec3 R = 2. * dot(N, uLd[l]) * N - uLd[l];\n         c += uLc[l] * (diffuse * max(0.,dot(N, uLd[l])) * uLi\n                      + specular * pow(max(0., dot(R, W)), 20.)) * uLi;\n      }\n\n      // WATER REFRACTION\n\n      vec3 rfc = vec3(0.);\n      float rftMin = 10.;\n\n      if (t < 10.) {\n         vec3 rDir = computeRefraction(W, N, .5);\n         /*\n         float rfFloor = rayFloor(P, rDir, rftMin);\n\n         if (rfFloor > 0. && rfFloor < rftMin) {\n            rftMin = rfFloor;\n            rfc = shadeFloor(P + rDir * rftMin);\n         }\n         */\n         for (int i = 0; i < nQ; i += 2) {\n            vec2 rfQ = rayTube(P, rDir, uQ[i], uQ[i + 1], rftMin);\n            if (rfQ.x > 0. && rfQ.x < rftMin) {\n               rftMin = rfQ.x;\n               vec3 rfN;\n               if (rfQ.y == 0.) rfN = normalQuadric(P + rfQ.x * rDir, uQ[i]);\n               else rfN = normalQuadric(P + rfQ.x * rDir, uQ[i + 1]);\n               rfc = shadeTube(P + rfQ.x * rDir, rfN);\n            }\n         }\n      }\n\n      if (rftMin < 10.) c = mix(rfc, c, 1. - rftMin / 10.);\n\n      c *= uLi;\n\n      return c;\n   }\n\n   // GENERATE TERRAIN HEIGHT USING NOISE\n\n   float getTerrainHeight(vec3 P) {\n      float h = noise(P * .02);\n      h += noise(P * .01);\n\n      return h * 10.;\n   }\n\n   // TRACE A NOISE-GENERATED TERRAIN USING RAY-MARCHING\n\n   float rayTerrain(vec3 V, vec3 W) {\n      vec3 s = V + 800. * W;\n\n      float t = 800.;\n\n      for (int i = 0; i < 20; i++) {\n         if (getTerrainHeight(s + 20. * W) > (s + 20. * W).y) break;\n         s += 10. * W;\n         t += 10.;\n      }\n\n      if (t < 1000.) return t - 10.;\n      return -1.;\n   }\n\n   void main() {\n\n      vec3 color;\n      vec3 V = uCamPos + vec3(0., 0., fl);\n      vec3 W = normalize(vec3(vPos.xy, -fl));\n\n      if ((V + W).y > computeSurfaceHeight(V + W)) {\n\n         // BACKGROUND COLOR IS THE DEFAULT COLOR\n\n         color = uBgColor * uLi;\n\n         // DEFINE RAY INTO SCENE FOR THIS PIXEL\n\n         float tMin = 1000.;\n\n         // RAY TRACE THE QUADRIC SURFACES\n\n         for (int i = 0; i < nQ; i += 2) {\n            vec2 tQ = rayTube(V, W, uQ[i], uQ[i + 1], tMin);\n\n            if (tQ.x > 0. && tQ.x < tMin) {\n               tMin = tQ.x;\n               vec3 n;\n               if (tQ.y == 0.) {\n                  n = normalQuadric(V + tMin * W, uQ[i]);\n               }\n               else {\n                  n = normalQuadric(V + tMin * W, uQ[i + 1]);\n               }\n\n               color = shadeTube(V + tMin * W, n);\n            }\n         }\n\n         // RAY TRACE AND SHADE THE SUN AND CLOUDS\n\n         float tSun = raySun(V, W);\n         if (tSun > 0. && tSun < tMin) {\n            color += shadeSun(V, W, tSun);\n            tMin = tSun;\n         }\n\n         color += shadeCloud(V, W, tMin);\n\n         // RAY TRACE SEA SURFACE\n\n         float tS = raySurface(V, W, tMin);\n\n         if (tS > 0. && tS < tMin) {\n            tMin = tS;\n            color = shadeSurface(W, V + tS * W, tMin);\n         }\n\n         // RAY TRACE TERRAIN\n         \n         float tT = rayTerrain(V, W);\n         if (tT > 0. && tT < tMin) {\n            tMin = tT;\n            color = vec3(0.);\n         }\n         \n         // ADD FOG LAYER\n\n         color = expFog(color, uLc[0], tMin, uFi);\n      }\n      else {\n         // RAY TRACE UNDERWATER\n\n         float tMin = 100.;\n\n         vec3 fogC = shadeUnderwater(V, W);\n\n         // RAY TRACE QUADRIC SURFACES UNDERWATER\n\n         for (int i = 0; i < nQ; i += 2) {\n            vec2 tQ = rayTube(V, W, uQ[i], uQ[i + 1], tMin);\n\n            if (tQ.x > 0. && tQ.x < tMin) {\n               tMin = tQ.x;\n               vec3 n;\n               if (tQ.y == 0.) {\n                  n = normalQuadric(V + tMin * W, uQ[i]);\n               }\n               else {\n                  n = normalQuadric(V + tMin * W, uQ[i + 1]);\n               }\n\n               color = shadeTube(V + tMin * W, n);\n            }\n         }\n\n         // RAY TRACE SEA FLOOR\n\n         float tF = rayFloor(V, W, tMin);\n\n         if (tF > 0. && tF < tMin) {\n            tMin = tF;\n            color = shadeFloor(V + tMin * W);\n         }\n\n         // RAY TRACE SEA SURFACE UNDERWATER\n\n         float tS = raySurfaceUnder(V, W, tMin);\n\n         if (tS > 0. && tS < tMin) {\n            tMin = tS;\n            color = shadeSurfaceUnder(W, V + tS * W, tMin);\n         }\n\n         color = expFog(color, fogC, tMin, .8);\n      }\n\n      // SET PIXEL COLOR\n\n      gl_FragColor = vec4(sqrt(color), 1.);\n   }\n`);\n",vertex:"\nS.setVertexShader(`\n\n   attribute vec3 aPos;\n   varying   vec3 vPos;\n\n   void main() {\n      vPos = aPos;\n      gl_Position = vec4(aPos, 1.);\n   }\n\n`)\n",render:"\n\n   // HANDY DANDY VECTOR LIBRARY\n\n   let add = (a,b) => [ a[0]+b[0], a[1]+b[1], a[2]+b[2] ];\n   let dot = (a,b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n   let norm = v => Math.sqrt(dot(v,v));\n   let normalize = v => {\n      let s = Math.sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);\n      return [ v[0]/s, v[1]/s, v[2]/s ];\n   }\n   let scale = (v,s) => [ s * v[0], s * v[1], s * v[2] ];\n   let subtract = (a,b) => [ a[0]-b[0], a[1]-b[1], a[2]-b[2] ];\n\n   // MATRIX LIBRARY\n\n   let matrixIdentity = () => [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1];\n\n   let matrixInverse = function(src) {\n   let dst = [], det = 0, cofactor = (c, r) => {\n      let s = (i, j) => src[c+i & 3 | (r+j & 3) << 2];\n      return (c+r & 1 ? -1 : 1) * ( (s(1,1) * (s(2,2) * s(3,3) - s(3,2) * s(2,3)))\n                                 - (s(2,1) * (s(1,2) * s(3,3) - s(3,2) * s(1,3)))\n                                 + (s(3,1) * (s(1,2) * s(2,3) - s(2,2) * s(1,3))) );\n      }\n      for (let n = 0 ; n < 16 ; n++) dst.push(cofactor(n >> 2, n & 3));\n      for (let n = 0 ; n <  4 ; n++) det += src[n] * dst[n << 2];\n      for (let n = 0 ; n < 16 ; n++) dst[n] /= det;\n      return dst;\n   }\n\n   let matrixMultiply = function(a, b) {\n      let dst = [];\n      for (let n = 0 ; n < 16 ; n++)\n         dst.push( a[n&3     ] * b[n&12    ] +\n                  a[n&3 |  4] * b[n&12 | 1] +\n                  a[n&3 |  8] * b[n&12 | 2] +\n                  a[n&3 | 12] * b[n&12 | 3] );\n      return dst;\n   }\n\n   let matrixRotx = t => {\n      let c = Math.cos(t), s = Math.sin(t);\n      return [1,0,0,0, 0,c,s,0, 0,-s,c,0, 0,0,0,1];\n   }\n\n   let matrixRoty = t => {\n      let c = Math.cos(t), s = Math.sin(t);\n      return [c,0,-s,0, 0,1,0,0, s,0,c,0, 0,0,0,1];\n   }\n\n   let matrixRotz = t => {\n      let c = Math.cos(t), s = Math.sin(t);\n      return [c,s,0,0, -s,c,0,0, 0,0,1,0, 0,0,0,1];\n   }\n\n   let matrixScale = (x,y,z) => [x,0,0,0, 0,y,0,0, 0,0,z,0, 0,0,0,1];\n\n   let matrixTranslate = (x,y,z) => [1,0,0,0, 0,1,0,0, 0,0,1,0, x,y,z,1];\n\n   let matrixTranspose = function(m) {\n      return [ m[0],m[4],m[ 8],m[12],\n               m[1],m[5],m[ 9],m[13],\n               m[2],m[6],m[10],m[14],\n               m[3],m[7],m[11],m[15] ];\n   }\n\n   let mTranslate = (x,y,z, M) => matrixMultiply(M, matrixTranslate(x,y,z));\n   let mRotx      = (theta, M) => matrixMultiply(M, matrixRotx(theta));\n   let mRoty      = (theta, M) => matrixMultiply(M, matrixRoty(theta));\n   let mRotz      = (theta, M) => matrixMultiply(M, matrixRotz(theta));\n   let mScale     = (x,y,z, M) => matrixMultiply(M, matrixScale(x,y,z));\n\n   // DIFFERENT QUADRIC SURFACES\n\n   let qSlabX  = [1,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,-1]; // x*x - 1 <= 0\n   let qSlabY  = [0,0,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,-1]; // y*y - 1 <= 0\n   let qSlabZ  = [0,0,0,0, 0,0,0,0, 0,0,1,0, 0,0,0,-1]; // z*z - 1 <= 0\n   let qSphere = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,-1]; // x*x + y*y + z*z - 1 <= 0\n   let qTubeX  = [0,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,-1]; // y*y + z*z - 1 <= 0\n   let qTubeY  = [1,0,0,0, 0,0,0,0, 0,0,1,0, 0,0,0,-1]; // x*x + z*z - 1 <= 0\n   let qTubeZ  = [1,0,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,-1]; // x*x + y*y - 1 <= 0\n\n   // SHAPES ARE INTERSECTIONS OF QUADRIC SURFACES\n\n   let coefs = [], xform = [], M;\n\n   let tubeX = (M) => {\n      xform.push(M, M);\n      coefs.push(qTubeX, qSlabX);\n   }\n\n   let tubeY = (M) => {\n      xform.push(M, M);\n      coefs.push(qTubeY, qSlabY);\n   }\n\n   tubeY(mScale(.05,1.,.05, matrixTranslate( .5,0.,-3.)));\n   tubeY(mScale(.05,1.,.05, matrixTranslate(-.5,0.,-3.)));\n   tubeX(mScale(.8,.05,.05, matrixTranslate( 0.,1.,-3.)));\n   tubeX(mScale(.5,.05,.05, matrixTranslate( 0.,.8,-3.)));\n\n   for (let n = 0 ; n < coefs.length ; n++) {\n      let IM = matrixInverse(xform[n]);\n      coefs[n] = matrixMultiply(matrixTranspose(IM), matrixMultiply(coefs[n], IM));\n   }\n\n   S.setUniform('Matrix4fv', 'uQ', false, coefs.flat());\n\n   // SEND CAMERA INFO TO GPU\n\n   let cmX = cpx.value;\n   let cmY = ch.value;\n   let cmZ = cpz.value;\n   S.cPos = [(cmX - 50.) / 50.,(cmY - 25.) / 50.,(cmZ - 50.) / 10.];\n\n   S.setUniform('3fv', 'uCamPos', S.cPos);\n\n   // GET ATMOSPHERIC DATA\n\n   let timeOfDay = tod.value;\n   let ldZ = 1. - timeOfDay / 50.;\n   let ldY = Math.sin((timeOfDay / 100.) * Math.PI);\n\n   let lcG = .5 + .5 * Math.sin((timeOfDay / 100.) * Math.PI);\n   let lcB = Math.sin((timeOfDay / 100.) * Math.PI);\n\n   // SEND LIGHT SOURCE DATA TO GPU\n\n   let ldData = [ normalize([.2,ldY,ldZ]) ];\n   let lIntensity = 1. + .5 * Math.sin((timeOfDay / 100.) * Math.PI);\n\n   let lcData = [1,lcG,lcB];\n\n   S.setUniform('3fv', 'uLd', ldData.flat());\n   S.setUniform('3fv', 'uLc', lcData);\n   S.setUniform('1f', 'uLi', lIntensity);\n\n   // SEND FOG DATA TO GPU\n\n   let fogIntensity = fi.value / 100.;\n\n   S.setUniform('1f', 'uFi', fogIntensity);\n\n   let cloudIntensity = ci.value / 100.;\n\n   S.setUniform('1f', 'uCi', cloudIntensity);\n\n   // SEND ANIMATION TIME TO GPU\n\n   S.setUniform('1f', 'uTime', time);\n\n   //S.setUniform('Matrix4fv', 'uSm', false, S.material.flat());\n\n   // SEND BACKGROUND COLOR TO GPU\n\n   S.setUniform('3fv', 'uBgColor', [ .15,.2,.85 ]);\n\n   // DEFINE NUMBER OF QUADRIC SURFACES FOR GPU\n\n   S.nQ = coefs.length;\n\n   // RENDER THIS ANIMATION FRAME\n\n   S.gl.drawArrays(S.gl.TRIANGLE_STRIP, 0, 4);\n",events:"\n   ;\n"}};